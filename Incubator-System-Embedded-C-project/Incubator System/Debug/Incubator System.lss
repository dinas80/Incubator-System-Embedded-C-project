
Incubator System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000d1c  00000db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080013c  0080013c  00000dec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000248a  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f35  00000000  00000000  0000354e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ff  00000000  00000000  00004483  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  00005784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083e  00000000  00000000  00005b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9f  00000000  00000000  000063c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00007061  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 36       	cpi	r26, 0x63	; 99
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <main>
  9e:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
	}

	 void ADC_DeInit()
	{
		ADMUX  = 0x00;
		ADCSRA = 0x00;
  a6:	8e 60       	ori	r24, 0x0E	; 14
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  ac:	90 68       	ori	r25, 0x80	; 128
  ae:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <ADC_ReadPin>:
	}

	uint16_t ADC_ReadPin(uint8_t Pin)
	{
		uint8_t Low, High;
		ADMUX = (ADMUX & ADC_VOLTAGE_REFERENCE_MASK) | Pin;
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	90 78       	andi	r25, 0x80	; 128
  bc:	89 2b       	or	r24, r25
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
		while (ADCSRA & (1<<ADSC));
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	86 fd       	sbrc	r24, 6
  d2:	fc cf       	rjmp	.-8      	; 0xcc <ADC_ReadPin+0x18>
		Low  = ADCL;
  d4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
		High = ADCH;
  d8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		return (High<<8) | Low;
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	98 2f       	mov	r25, r24
  e0:	88 27       	eor	r24, r24
	}
  e2:	82 2b       	or	r24, r18
  e4:	08 95       	ret

000000e6 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  e6:	83 34       	cpi	r24, 0x43	; 67
  e8:	f1 f0       	breq	.+60     	; 0x126 <DIO_vsetPINDir+0x40>
  ea:	84 34       	cpi	r24, 0x44	; 68
  ec:	a9 f1       	breq	.+106    	; 0x158 <DIO_vsetPINDir+0x72>
  ee:	82 34       	cpi	r24, 0x42	; 66
  f0:	09 f0       	breq	.+2      	; 0xf4 <DIO_vsetPINDir+0xe>
  f2:	4a c0       	rjmp	.+148    	; 0x188 <DIO_vsetPINDir+0xa2>
	{
		case 'B':
		if(direction==1)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_vsetPINDir+0x28>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
  f8:	24 b1       	in	r18, 0x04	; 4
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_vsetPINDir+0x1e>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_vsetPINDir+0x1a>
 108:	82 2b       	or	r24, r18
 10a:	84 b9       	out	0x04, r24	; 4
 10c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 10e:	24 b1       	in	r18, 0x04	; 4
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_vsetPINDir+0x34>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_vsetPINDir+0x30>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	84 b9       	out	0x04, r24	; 4
 124:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_vsetPINDir+0x5a>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 12a:	27 b1       	in	r18, 0x07	; 7
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPINDir+0x50>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPINDir+0x4c>
 13a:	82 2b       	or	r24, r18
 13c:	87 b9       	out	0x07, r24	; 7
 13e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 140:	27 b1       	in	r18, 0x07	; 7
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_vsetPINDir+0x66>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_vsetPINDir+0x62>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	87 b9       	out	0x07, r24	; 7
 156:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 158:	41 30       	cpi	r20, 0x01	; 1
 15a:	59 f4       	brne	.+22     	; 0x172 <DIO_vsetPINDir+0x8c>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 15c:	2a b1       	in	r18, 0x0a	; 10
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_vsetPINDir+0x82>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_vsetPINDir+0x7e>
 16c:	82 2b       	or	r24, r18
 16e:	8a b9       	out	0x0a, r24	; 10
 170:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 172:	2a b1       	in	r18, 0x0a	; 10
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_vsetPINDir+0x98>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_vsetPINDir+0x94>
 182:	80 95       	com	r24
 184:	82 23       	and	r24, r18
 186:	8a b9       	out	0x0a, r24	; 10
 188:	08 95       	ret

0000018a <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 18a:	83 34       	cpi	r24, 0x43	; 67
 18c:	f1 f0       	breq	.+60     	; 0x1ca <DIO_write+0x40>
 18e:	84 34       	cpi	r24, 0x44	; 68
 190:	a9 f1       	breq	.+106    	; 0x1fc <DIO_write+0x72>
 192:	82 34       	cpi	r24, 0x42	; 66
 194:	09 f0       	breq	.+2      	; 0x198 <DIO_write+0xe>
 196:	4a c0       	rjmp	.+148    	; 0x22c <DIO_write+0xa2>
	{
		case 'B':
		
		if(outputvalue==1)
 198:	41 30       	cpi	r20, 0x01	; 1
 19a:	59 f4       	brne	.+22     	; 0x1b2 <DIO_write+0x28>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 19c:	25 b1       	in	r18, 0x05	; 5
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_write+0x1e>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_write+0x1a>
 1ac:	82 2b       	or	r24, r18
 1ae:	85 b9       	out	0x05, r24	; 5
 1b0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 1b2:	25 b1       	in	r18, 0x05	; 5
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_write+0x34>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_write+0x30>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	85 b9       	out	0x05, r24	; 5
 1c8:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 1ca:	41 30       	cpi	r20, 0x01	; 1
 1cc:	59 f4       	brne	.+22     	; 0x1e4 <DIO_write+0x5a>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 1ce:	28 b1       	in	r18, 0x08	; 8
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_write+0x50>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_write+0x4c>
 1de:	82 2b       	or	r24, r18
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 1e4:	28 b1       	in	r18, 0x08	; 8
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_write+0x66>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_write+0x62>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	88 b9       	out	0x08, r24	; 8
 1fa:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	59 f4       	brne	.+22     	; 0x216 <DIO_write+0x8c>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 200:	2b b1       	in	r18, 0x0b	; 11
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_write+0x82>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_write+0x7e>
 210:	82 2b       	or	r24, r18
 212:	8b b9       	out	0x0b, r24	; 11
 214:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 216:	2b b1       	in	r18, 0x0b	; 11
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_write+0x98>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_write+0x94>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	8b b9       	out	0x0b, r24	; 11
 22c:	08 95       	ret

0000022e <Fan_Init>:

#include "Fan.h"

void Fan_Init()
{
	PWM_init();
 22e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <PWM_init>
 232:	08 95       	ret

00000234 <Fan_On_Automatic>:
}

void Fan_On_Automatic()
{
	PWM_setDutyCycle(200);
 234:	88 ec       	ldi	r24, 0xC8	; 200
 236:	0e 94 02 05 	call	0xa04	; 0xa04 <PWM_setDutyCycle>
 23a:	08 95       	ret

0000023c <Fan_On_Manual>:
}
void Fan_On_Manual(u8 speed)
{
	PWM_setDutyCycle(speed);
 23c:	0e 94 02 05 	call	0xa04	; 0xa04 <PWM_setDutyCycle>
 240:	08 95       	ret

00000242 <Fan_Off>:
}
void Fan_Off()
{
	PWM_setDutyCycle(0);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 02 05 	call	0xa04	; 0xa04 <PWM_setDutyCycle>
 248:	08 95       	ret

0000024a <Data_recieveing>:
#include <stdio.h> 

void Data_recieveing (void)
{

	UART_getLine(buf, 10);
 24a:	6a e0       	ldi	r22, 0x0A	; 10
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	84 e5       	ldi	r24, 0x54	; 84
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 35 05 	call	0xa6a	; 0xa6a <UART_getLine>
	start_bit = buf[0];
 256:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <buf>
 25a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <start_bit>
	
	if (start_bit == '@')
 25e:	80 34       	cpi	r24, 0x40	; 64
 260:	09 f0       	breq	.+2      	; 0x264 <Data_recieveing+0x1a>
 262:	4b c0       	rjmp	.+150    	; 0x2fa <Data_recieveing+0xb0>
	{   Mode = buf[1]; 
 264:	e4 e5       	ldi	r30, 0x54	; 84
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <Mode>
	    Minimum_temp = buf[2]; Minimum_temp_1 = buf[3]; 
 26e:	52 81       	ldd	r21, Z+2	; 0x02
 270:	50 93 44 01 	sts	0x0144, r21	; 0x800144 <Minimum_temp>
 274:	33 81       	ldd	r19, Z+3	; 0x03
 276:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <Minimum_temp_1>
	    Maximum_temp = buf[4]; Maximum_temp_1 = buf[5]; 
 27a:	44 81       	ldd	r20, Z+4	; 0x04
 27c:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <Maximum_temp>
 280:	25 81       	ldd	r18, Z+5	; 0x05
 282:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <Maximum_temp_1>
	    Fan_state = buf[6]; 
 286:	86 81       	ldd	r24, Z+6	; 0x06
 288:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <Fan_state>
	    Lamp_state = buf[7];
 28c:	87 81       	ldd	r24, Z+7	; 0x07
 28e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <Lamp_state>
	    Fan_speed = buf[8]; Fan_speed_1 = buf[9];
 292:	70 85       	ldd	r23, Z+8	; 0x08
 294:	70 93 62 01 	sts	0x0162, r23	; 0x800162 <Fan_speed>
 298:	91 85       	ldd	r25, Z+9	; 0x09
 29a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <Fan_speed_1>
		for(u8 i=0;i<=9;i++){buf[i]=0;}
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <Data_recieveing+0x64>
 2a2:	e8 2f       	mov	r30, r24
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	ec 5a       	subi	r30, 0xAC	; 172
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	10 82       	st	Z, r1
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	8a 30       	cpi	r24, 0x0A	; 10
 2b0:	c0 f3       	brcs	.-16     	; 0x2a2 <Data_recieveing+0x58>
        u8_Minimum_temp = ((u8)Minimum_temp)+((((u8)Minimum_temp_1)*10));
 2b2:	33 0f       	add	r19, r19
 2b4:	63 2f       	mov	r22, r19
 2b6:	66 0f       	add	r22, r22
 2b8:	66 0f       	add	r22, r22
 2ba:	36 0f       	add	r19, r22
 2bc:	53 0f       	add	r21, r19
 2be:	50 93 52 01 	sts	0x0152, r21	; 0x800152 <u8_Minimum_temp>
		u8_Maximum_temp = ((u8)Maximum_temp)+((((u8)Maximum_temp_1)*10));
 2c2:	22 0f       	add	r18, r18
 2c4:	32 2f       	mov	r19, r18
 2c6:	33 0f       	add	r19, r19
 2c8:	33 0f       	add	r19, r19
 2ca:	23 0f       	add	r18, r19
 2cc:	42 0f       	add	r20, r18
 2ce:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <u8_Maximum_temp>
		Fan_speed_u8 =  (((u8)(Fan_speed))+(u8)((Fan_speed_1)*10));
 2d2:	89 2f       	mov	r24, r25
 2d4:	88 0f       	add	r24, r24
 2d6:	98 2f       	mov	r25, r24
 2d8:	99 0f       	add	r25, r25
 2da:	99 0f       	add	r25, r25
 2dc:	89 0f       	add	r24, r25
 2de:	87 0f       	add	r24, r23
 2e0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <Fan_speed_u8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	89 e6       	ldi	r24, 0x69	; 105
 2e8:	98 e1       	ldi	r25, 0x18	; 24
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <Data_recieveing+0xa0>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <Data_recieveing+0xaa>
 2f4:	00 00       	nop
	    _delay_ms(500);
		LCD_clearscreen();
 2f6:	0e 94 12 04 	call	0x824	; 0x824 <LCD_clearscreen>
 2fa:	08 95       	ret

000002fc <Automatic_mode>:
	
}

void Automatic_mode()
{
	read_temperature = get_reading();
 2fc:	0e 94 42 04 	call	0x884	; 0x884 <get_reading>
 300:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <read_temperature>
	while (read_temperature < u8_Minimum_temp)
 304:	24 c0       	rjmp	.+72     	; 0x34e <Automatic_mode+0x52>
	{
		read_temperature = get_reading();
 306:	0e 94 42 04 	call	0x884	; 0x884 <get_reading>
 30a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <read_temperature>
		LCD_vSend_string(" C, LOW TEMP ");
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_vSend_string>
		temp = (char)read_temperature;
 316:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <read_temperature>
 31a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <temp>
	    transmit_buf[0] = 'L';
 31e:	e9 e4       	ldi	r30, 0x49	; 73
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	8c e4       	ldi	r24, 0x4C	; 76
 324:	80 83       	st	Z, r24
		transmit_buf[1]='_';
 326:	8f e5       	ldi	r24, 0x5F	; 95
 328:	81 83       	std	Z+1, r24	; 0x01
	    USART_SendString(transmit_buf);
 32a:	cf 01       	movw	r24, r30
 32c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <USART_SendString>
		Relay_On();
 330:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Relay_On>
 334:	2f ef       	ldi	r18, 0xFF	; 255
 336:	83 ed       	ldi	r24, 0xD3	; 211
 338:	90 e3       	ldi	r25, 0x30	; 48
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <Automatic_mode+0x3e>
 342:	00 c0       	rjmp	.+0      	; 0x344 <Automatic_mode+0x48>
 344:	00 00       	nop
		_delay_ms(1000);
		if(buf[0]=='@')break;
 346:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <buf>
 34a:	80 34       	cpi	r24, 0x40	; 64
 34c:	31 f0       	breq	.+12     	; 0x35a <Automatic_mode+0x5e>
}

void Automatic_mode()
{
	read_temperature = get_reading();
	while (read_temperature < u8_Minimum_temp)
 34e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <read_temperature>
 352:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_Minimum_temp>
 356:	98 17       	cp	r25, r24
 358:	b0 f2       	brcs	.-84     	; 0x306 <Automatic_mode+0xa>
	    USART_SendString(transmit_buf);
		Relay_On();
		_delay_ms(1000);
		if(buf[0]=='@')break;
	}
		Relay_Off();
 35a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <Relay_Off>
	while (read_temperature > u8_Maximum_temp)
 35e:	24 c0       	rjmp	.+72     	; 0x3a8 <Automatic_mode+0xac>
	{
		read_temperature = get_reading();
 360:	0e 94 42 04 	call	0x884	; 0x884 <get_reading>
 364:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <read_temperature>
		LCD_vSend_string(" C, HIGH TEMP ");
 368:	8e e0       	ldi	r24, 0x0E	; 14
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_vSend_string>
		temp = (char)read_temperature;
 370:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <read_temperature>
 374:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <temp>
		transmit_buf[0] ='H';
 378:	e9 e4       	ldi	r30, 0x49	; 73
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	88 e4       	ldi	r24, 0x48	; 72
 37e:	80 83       	st	Z, r24
		transmit_buf[1] = '_';
 380:	8f e5       	ldi	r24, 0x5F	; 95
 382:	81 83       	std	Z+1, r24	; 0x01
 	USART_SendString(transmit_buf);
 384:	cf 01       	movw	r24, r30
 386:	0e 94 1f 05 	call	0xa3e	; 0xa3e <USART_SendString>
		Fan_On_Automatic();
 38a:	0e 94 1a 01 	call	0x234	; 0x234 <Fan_On_Automatic>
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	83 ed       	ldi	r24, 0xD3	; 211
 392:	90 e3       	ldi	r25, 0x30	; 48
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <Automatic_mode+0x98>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <Automatic_mode+0xa2>
 39e:	00 00       	nop
			_delay_ms(1000);
			if(buf[0]=='@')break;
 3a0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <buf>
 3a4:	80 34       	cpi	r24, 0x40	; 64
 3a6:	31 f0       	breq	.+12     	; 0x3b4 <Automatic_mode+0xb8>
		Relay_On();
		_delay_ms(1000);
		if(buf[0]=='@')break;
	}
		Relay_Off();
	while (read_temperature > u8_Maximum_temp)
 3a8:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <read_temperature>
 3ac:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_Maximum_temp>
 3b0:	89 17       	cp	r24, r25
 3b2:	b0 f2       	brcs	.-84     	; 0x360 <Automatic_mode+0x64>
 	USART_SendString(transmit_buf);
		Fan_On_Automatic();
			_delay_ms(1000);
			if(buf[0]=='@')break;
	}
	Fan_Off();
 3b4:	0e 94 21 01 	call	0x242	; 0x242 <Fan_Off>
	LCD_vSend_string(" C, OKAY ");
 3b8:	8d e1       	ldi	r24, 0x1D	; 29
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_vSend_string>
		temp = (char)read_temperature;
 3c0:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <read_temperature>
 3c4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <temp>
		transmit_buf[0] = 'O';
 3c8:	e9 e4       	ldi	r30, 0x49	; 73
 3ca:	f1 e0       	ldi	r31, 0x01	; 1
 3cc:	8f e4       	ldi	r24, 0x4F	; 79
 3ce:	80 83       	st	Z, r24
		transmit_buf[1]='_';
 3d0:	8f e5       	ldi	r24, 0x5F	; 95
 3d2:	81 83       	std	Z+1, r24	; 0x01
		USART_SendString(transmit_buf);
 3d4:	cf 01       	movw	r24, r30
 3d6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <USART_SendString>
 3da:	2f ef       	ldi	r18, 0xFF	; 255
 3dc:	83 ed       	ldi	r24, 0xD3	; 211
 3de:	90 e3       	ldi	r25, 0x30	; 48
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <Automatic_mode+0xe4>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <Automatic_mode+0xee>
 3ea:	00 00       	nop
 3ec:	08 95       	ret

000003ee <Manual_mode>:

}

void Manual_mode()
{
	read_temperature = get_reading();
 3ee:	0e 94 42 04 	call	0x884	; 0x884 <get_reading>
 3f2:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <read_temperature>
	if (read_temperature < u8_Minimum_temp)
 3f6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <u8_Minimum_temp>
 3fa:	89 17       	cp	r24, r25
 3fc:	b0 f4       	brcc	.+44     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	{
		read_temperature = get_reading();
 3fe:	0e 94 42 04 	call	0x884	; 0x884 <get_reading>
 402:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <read_temperature>
		LCD_vSend_string(" C, LOW TEMP ");
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_vSend_string>
				temp = (char)read_temperature;
 40e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <read_temperature>
 412:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <temp>
				transmit_buf[0] = 'L';
 416:	e9 e4       	ldi	r30, 0x49	; 73
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	8c e4       	ldi	r24, 0x4C	; 76
 41c:	80 83       	st	Z, r24
				transmit_buf[1]='_';
 41e:	8f e5       	ldi	r24, 0x5F	; 95
 420:	81 83       	std	Z+1, r24	; 0x01
			USART_SendString(transmit_buf);
 422:	cf 01       	movw	r24, r30
 424:	0e 94 1f 05 	call	0xa3e	; 0xa3e <USART_SendString>
 428:	2b c0       	rjmp	.+86     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
	}
	else if (read_temperature > u8_Maximum_temp)
 42a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <u8_Maximum_temp>
 42e:	98 17       	cp	r25, r24
 430:	b0 f4       	brcc	.+44     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
	{
		read_temperature = get_reading();
 432:	0e 94 42 04 	call	0x884	; 0x884 <get_reading>
 436:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <read_temperature>
		LCD_vSend_string(" C, HIGH TEMP ");
 43a:	8e e0       	ldi	r24, 0x0E	; 14
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_vSend_string>
				temp = (char)read_temperature;
 442:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <read_temperature>
 446:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <temp>
			    transmit_buf[0] = 'H';
 44a:	e9 e4       	ldi	r30, 0x49	; 73
 44c:	f1 e0       	ldi	r31, 0x01	; 1
 44e:	88 e4       	ldi	r24, 0x48	; 72
 450:	80 83       	st	Z, r24
			    transmit_buf[1]='_';
 452:	8f e5       	ldi	r24, 0x5F	; 95
 454:	81 83       	std	Z+1, r24	; 0x01
                USART_SendString(transmit_buf);
 456:	cf 01       	movw	r24, r30
 458:	0e 94 1f 05 	call	0xa3e	; 0xa3e <USART_SendString>
 45c:	11 c0       	rjmp	.+34     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
	}
	else {
	LCD_vSend_string(" C, OKAY ");
 45e:	8d e1       	ldi	r24, 0x1D	; 29
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_vSend_string>
			temp = (char)read_temperature;
 466:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <read_temperature>
 46a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <temp>
			transmit_buf[0] = 'O';
 46e:	e9 e4       	ldi	r30, 0x49	; 73
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	8f e4       	ldi	r24, 0x4F	; 79
 474:	80 83       	st	Z, r24
			transmit_buf[1]='_';
 476:	8f e5       	ldi	r24, 0x5F	; 95
 478:	81 83       	std	Z+1, r24	; 0x01
			USART_SendString(transmit_buf);}
 47a:	cf 01       	movw	r24, r30
 47c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <USART_SendString>
	
	if (Fan_state == 'Y'&& Lamp_state == 'Y' )
 480:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Fan_state>
 484:	89 35       	cpi	r24, 0x59	; 89
 486:	59 f4       	brne	.+22     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 488:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <Lamp_state>
 48c:	99 35       	cpi	r25, 0x59	; 89
 48e:	39 f4       	brne	.+14     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
	{
		Fan_On_Manual(Fan_speed_u8);
 490:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <Fan_speed_u8>
 494:	0e 94 1e 01 	call	0x23c	; 0x23c <Fan_On_Manual>
			Relay_On();
 498:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Relay_On>
 49c:	08 95       	ret
	}
	else if (Fan_state == 'Y'&& Lamp_state == 'N')
 49e:	89 35       	cpi	r24, 0x59	; 89
 4a0:	59 f4       	brne	.+22     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4a2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <Lamp_state>
 4a6:	9e 34       	cpi	r25, 0x4E	; 78
 4a8:	39 f4       	brne	.+14     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
	{
		Fan_On_Manual(Fan_speed_u8);
 4aa:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <Fan_speed_u8>
 4ae:	0e 94 1e 01 	call	0x23c	; 0x23c <Fan_On_Manual>
		Relay_Off();
 4b2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <Relay_Off>
 4b6:	08 95       	ret
	
	}
	else if (Fan_state == 'N'&& Lamp_state == 'Y')
 4b8:	8e 34       	cpi	r24, 0x4E	; 78
 4ba:	49 f4       	brne	.+18     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4bc:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <Lamp_state>
 4c0:	99 35       	cpi	r25, 0x59	; 89
 4c2:	29 f4       	brne	.+10     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
	{
		Fan_Off();
 4c4:	0e 94 21 01 	call	0x242	; 0x242 <Fan_Off>
		Relay_On();
 4c8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Relay_On>
 4cc:	08 95       	ret
	}
	else if (Fan_state == 'N'&& Lamp_state == 'N')
 4ce:	8e 34       	cpi	r24, 0x4E	; 78
 4d0:	41 f4       	brne	.+16     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4d2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <Lamp_state>
 4d6:	8e 34       	cpi	r24, 0x4E	; 78
 4d8:	21 f4       	brne	.+8      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
	{
		Fan_Off();
 4da:	0e 94 21 01 	call	0x242	; 0x242 <Fan_Off>
		Relay_Off();
 4de:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <Relay_Off>
 4e2:	08 95       	ret

000004e4 <Mode_select>:
	
}

void Mode_select()
{
	switch (Mode)
 4e4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Mode>
 4e8:	81 34       	cpi	r24, 0x41	; 65
 4ea:	19 f0       	breq	.+6      	; 0x4f2 <Mode_select+0xe>
 4ec:	8d 34       	cpi	r24, 0x4D	; 77
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <Mode_select+0x12>
 4f0:	08 95       	ret
	{
		case 'A': Automatic_mode();
 4f2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Automatic_mode>
		case 'M': Manual_mode();
 4f6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Manual_mode>
 4fa:	08 95       	ret

000004fc <System_init>:
}

void System_init()
{
	
		LCD_vInit();
 4fc:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_vInit>
		LM35_Init();
 500:	0e 94 3d 04 	call	0x87a	; 0x87a <LM35_Init>
		USART_Init();
 504:	0e 94 05 05 	call	0xa0a	; 0xa0a <USART_Init>
		Fan_Init();
 508:	0e 94 17 01 	call	0x22e	; 0x22e <Fan_Init>
		Relay_Init();
 50c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Relay_Init>
		LCD_movecursor(0,0);
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_movecursor>
		LCD_vSend_string("WELCOME TO INC.");
 518:	87 e2       	ldi	r24, 0x27	; 39
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_vSend_string>
		LCD_movecursor(2,2);
 520:	62 e0       	ldi	r22, 0x02	; 2
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_movecursor>
		LCD_vSend_string("SYS.");
 528:	87 e3       	ldi	r24, 0x37	; 55
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_vSend_string>
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	8b e7       	ldi	r24, 0x7B	; 123
 534:	92 e9       	ldi	r25, 0x92	; 146
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <System_init+0x3a>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <System_init+0x44>
 540:	00 00       	nop
		_delay_ms(3000);
		LCD_clearscreen();
 542:	0e 94 12 04 	call	0x824	; 0x824 <LCD_clearscreen>
 546:	08 95       	ret

00000548 <System_main_function>:
}

void System_main_function(void)
{
	
			Data_recieveing();
 548:	0e 94 25 01 	call	0x24a	; 0x24a <Data_recieveing>
			Mode_select();
 54c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Mode_select>
 550:	08 95       	ret

00000552 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('D',EN,1);
 552:	41 e0       	ldi	r20, 0x01	; 1
 554:	64 e0       	ldi	r22, 0x04	; 4
 556:	84 e4       	ldi	r24, 0x44	; 68
 558:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
 55c:	83 ef       	ldi	r24, 0xF3	; 243
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <send_falling_edge+0xe>
 564:	00 c0       	rjmp	.+0      	; 0x566 <send_falling_edge+0x14>
 566:	00 00       	nop
	_delay_ms(2);
	DIO_write('D',EN,0);
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	64 e0       	ldi	r22, 0x04	; 4
 56c:	84 e4       	ldi	r24, 0x44	; 68
 56e:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
 572:	83 ef       	ldi	r24, 0xF3	; 243
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <send_falling_edge+0x24>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <send_falling_edge+0x2a>
 57c:	00 00       	nop
 57e:	08 95       	ret

00000580 <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
 580:	cf 93       	push	r28
 582:	c8 2f       	mov	r28, r24
	#if defined eight_bits_mode
	//DIO_write_port('A',cmd);
	DIO_write('D',5,READ_BIT(cmd,0));
 584:	48 2f       	mov	r20, r24
 586:	41 70       	andi	r20, 0x01	; 1
 588:	65 e0       	ldi	r22, 0x05	; 5
 58a:	84 e4       	ldi	r24, 0x44	; 68
 58c:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('D',6,READ_BIT(cmd,1));
 590:	4c 2f       	mov	r20, r28
 592:	42 70       	andi	r20, 0x02	; 2
 594:	50 e0       	ldi	r21, 0x00	; 0
 596:	55 95       	asr	r21
 598:	47 95       	ror	r20
 59a:	66 e0       	ldi	r22, 0x06	; 6
 59c:	84 e4       	ldi	r24, 0x44	; 68
 59e:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('D',7,READ_BIT(cmd,2));
 5a2:	4c 2f       	mov	r20, r28
 5a4:	44 70       	andi	r20, 0x04	; 4
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	55 95       	asr	r21
 5aa:	47 95       	ror	r20
 5ac:	55 95       	asr	r21
 5ae:	47 95       	ror	r20
 5b0:	67 e0       	ldi	r22, 0x07	; 7
 5b2:	84 e4       	ldi	r24, 0x44	; 68
 5b4:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('B',0,READ_BIT(cmd,3));
 5b8:	4c 2f       	mov	r20, r28
 5ba:	48 70       	andi	r20, 0x08	; 8
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	55 95       	asr	r21
 5c0:	47 95       	ror	r20
 5c2:	55 95       	asr	r21
 5c4:	47 95       	ror	r20
 5c6:	55 95       	asr	r21
 5c8:	47 95       	ror	r20
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	82 e4       	ldi	r24, 0x42	; 66
 5ce:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('B',1,READ_BIT(cmd,4));
 5d2:	4c 2f       	mov	r20, r28
 5d4:	40 71       	andi	r20, 0x10	; 16
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	55 95       	asr	r21
 5da:	47 95       	ror	r20
 5dc:	55 95       	asr	r21
 5de:	47 95       	ror	r20
 5e0:	55 95       	asr	r21
 5e2:	47 95       	ror	r20
 5e4:	55 95       	asr	r21
 5e6:	47 95       	ror	r20
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	82 e4       	ldi	r24, 0x42	; 66
 5ec:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('B',2,READ_BIT(cmd,5));
 5f0:	4c 2f       	mov	r20, r28
 5f2:	40 72       	andi	r20, 0x20	; 32
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	55 95       	asr	r21
 5f8:	47 95       	ror	r20
 5fa:	55 95       	asr	r21
 5fc:	47 95       	ror	r20
 5fe:	55 95       	asr	r21
 600:	47 95       	ror	r20
 602:	55 95       	asr	r21
 604:	47 95       	ror	r20
 606:	55 95       	asr	r21
 608:	47 95       	ror	r20
 60a:	62 e0       	ldi	r22, 0x02	; 2
 60c:	82 e4       	ldi	r24, 0x42	; 66
 60e:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('B',4,READ_BIT(cmd,6));
 612:	4c 2f       	mov	r20, r28
 614:	40 74       	andi	r20, 0x40	; 64
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	04 2e       	mov	r0, r20
 61a:	45 2f       	mov	r20, r21
 61c:	00 0c       	add	r0, r0
 61e:	44 1f       	adc	r20, r20
 620:	55 0b       	sbc	r21, r21
 622:	00 0c       	add	r0, r0
 624:	44 1f       	adc	r20, r20
 626:	55 1f       	adc	r21, r21
 628:	64 e0       	ldi	r22, 0x04	; 4
 62a:	82 e4       	ldi	r24, 0x42	; 66
 62c:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('B',5,READ_BIT(cmd,7));
 630:	4c 2f       	mov	r20, r28
 632:	44 1f       	adc	r20, r20
 634:	44 27       	eor	r20, r20
 636:	44 1f       	adc	r20, r20
 638:	65 e0       	ldi	r22, 0x05	; 5
 63a:	82 e4       	ldi	r24, 0x42	; 66
 63c:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('D',RS,0);
 640:	40 e0       	ldi	r20, 0x00	; 0
 642:	62 e0       	ldi	r22, 0x02	; 2
 644:	84 e4       	ldi	r24, 0x44	; 68
 646:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	send_falling_edge();
 64a:	0e 94 a9 02 	call	0x552	; 0x552 <send_falling_edge>
 64e:	89 ef       	ldi	r24, 0xF9	; 249
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <LCD_vSend_cmd+0xd2>
 656:	00 c0       	rjmp	.+0      	; 0x658 <LCD_vSend_cmd+0xd8>
 658:	00 00       	nop
	write_high_nibble('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <LCD_vInit>:
 65e:	8f e4       	ldi	r24, 0x4F	; 79
 660:	93 ec       	ldi	r25, 0xC3	; 195
 662:	01 97       	sbiw	r24, 0x01	; 1
 664:	f1 f7       	brne	.-4      	; 0x662 <LCD_vInit+0x4>
 666:	00 c0       	rjmp	.+0      	; 0x668 <LCD_vInit+0xa>
 668:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('D',5,1);
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	65 e0       	ldi	r22, 0x05	; 5
 66e:	84 e4       	ldi	r24, 0x44	; 68
 670:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',6,1);
 674:	41 e0       	ldi	r20, 0x01	; 1
 676:	66 e0       	ldi	r22, 0x06	; 6
 678:	84 e4       	ldi	r24, 0x44	; 68
 67a:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',7,1);
 67e:	41 e0       	ldi	r20, 0x01	; 1
 680:	67 e0       	ldi	r22, 0x07	; 7
 682:	84 e4       	ldi	r24, 0x44	; 68
 684:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',0,1);
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	82 e4       	ldi	r24, 0x42	; 66
 68e:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',1,1);
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	82 e4       	ldi	r24, 0x42	; 66
 698:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',2,1);
 69c:	41 e0       	ldi	r20, 0x01	; 1
 69e:	62 e0       	ldi	r22, 0x02	; 2
 6a0:	82 e4       	ldi	r24, 0x42	; 66
 6a2:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',4,1);
 6a6:	41 e0       	ldi	r20, 0x01	; 1
 6a8:	64 e0       	ldi	r22, 0x04	; 4
 6aa:	82 e4       	ldi	r24, 0x42	; 66
 6ac:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',5,1);
 6b0:	41 e0       	ldi	r20, 0x01	; 1
 6b2:	65 e0       	ldi	r22, 0x05	; 5
 6b4:	82 e4       	ldi	r24, 0x42	; 66
 6b6:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',EN,1);
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	64 e0       	ldi	r22, 0x04	; 4
 6be:	84 e4       	ldi	r24, 0x44	; 68
 6c0:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',RW,1);
 6c4:	41 e0       	ldi	r20, 0x01	; 1
 6c6:	63 e0       	ldi	r22, 0x03	; 3
 6c8:	84 e4       	ldi	r24, 0x44	; 68
 6ca:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',RS,1);
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	62 e0       	ldi	r22, 0x02	; 2
 6d2:	84 e4       	ldi	r24, 0x44	; 68
 6d4:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
	DIO_write('D',RW,0);
 6d8:	40 e0       	ldi	r20, 0x00	; 0
 6da:	63 e0       	ldi	r22, 0x03	; 3
 6dc:	84 e4       	ldi	r24, 0x44	; 68
 6de:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
 6e2:	88 e3       	ldi	r24, 0x38	; 56
 6e4:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_vSend_cmd>
 6e8:	89 ef       	ldi	r24, 0xF9	; 249
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <LCD_vInit+0x8e>
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <LCD_vInit+0x94>
 6f2:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 6f4:	8e e0       	ldi	r24, 0x0E	; 14
 6f6:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_vSend_cmd>
 6fa:	89 ef       	ldi	r24, 0xF9	; 249
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <LCD_vInit+0xa0>
 702:	00 c0       	rjmp	.+0      	; 0x704 <LCD_vInit+0xa6>
 704:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_vSend_cmd>
 70c:	83 ec       	ldi	r24, 0xC3	; 195
 70e:	99 e0       	ldi	r25, 0x09	; 9
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <LCD_vInit+0xb2>
 714:	00 c0       	rjmp	.+0      	; 0x716 <LCD_vInit+0xb8>
 716:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 718:	86 e0       	ldi	r24, 0x06	; 6
 71a:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_vSend_cmd>
 71e:	89 ef       	ldi	r24, 0xF9	; 249
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <LCD_vInit+0xc4>
 726:	00 c0       	rjmp	.+0      	; 0x728 <LCD_vInit+0xca>
 728:	00 00       	nop
 72a:	08 95       	ret

0000072c <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 72c:	cf 93       	push	r28
 72e:	c8 2f       	mov	r28, r24
	#if defined eight_bits_mode
	//DIO_write_port('A',data);
	DIO_write('D',5,READ_BIT(data,0));
 730:	48 2f       	mov	r20, r24
 732:	41 70       	andi	r20, 0x01	; 1
 734:	65 e0       	ldi	r22, 0x05	; 5
 736:	84 e4       	ldi	r24, 0x44	; 68
 738:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('D',6,READ_BIT(data,1));
 73c:	4c 2f       	mov	r20, r28
 73e:	42 70       	andi	r20, 0x02	; 2
 740:	50 e0       	ldi	r21, 0x00	; 0
 742:	55 95       	asr	r21
 744:	47 95       	ror	r20
 746:	66 e0       	ldi	r22, 0x06	; 6
 748:	84 e4       	ldi	r24, 0x44	; 68
 74a:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('D',7,READ_BIT(data,2));
 74e:	4c 2f       	mov	r20, r28
 750:	44 70       	andi	r20, 0x04	; 4
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	55 95       	asr	r21
 756:	47 95       	ror	r20
 758:	55 95       	asr	r21
 75a:	47 95       	ror	r20
 75c:	67 e0       	ldi	r22, 0x07	; 7
 75e:	84 e4       	ldi	r24, 0x44	; 68
 760:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('B',0,READ_BIT(data,3));
 764:	4c 2f       	mov	r20, r28
 766:	48 70       	andi	r20, 0x08	; 8
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	55 95       	asr	r21
 76c:	47 95       	ror	r20
 76e:	55 95       	asr	r21
 770:	47 95       	ror	r20
 772:	55 95       	asr	r21
 774:	47 95       	ror	r20
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	82 e4       	ldi	r24, 0x42	; 66
 77a:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('B',1,READ_BIT(data,4));
 77e:	4c 2f       	mov	r20, r28
 780:	40 71       	andi	r20, 0x10	; 16
 782:	50 e0       	ldi	r21, 0x00	; 0
 784:	55 95       	asr	r21
 786:	47 95       	ror	r20
 788:	55 95       	asr	r21
 78a:	47 95       	ror	r20
 78c:	55 95       	asr	r21
 78e:	47 95       	ror	r20
 790:	55 95       	asr	r21
 792:	47 95       	ror	r20
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	82 e4       	ldi	r24, 0x42	; 66
 798:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('B',2,READ_BIT(data,5));
 79c:	4c 2f       	mov	r20, r28
 79e:	40 72       	andi	r20, 0x20	; 32
 7a0:	50 e0       	ldi	r21, 0x00	; 0
 7a2:	55 95       	asr	r21
 7a4:	47 95       	ror	r20
 7a6:	55 95       	asr	r21
 7a8:	47 95       	ror	r20
 7aa:	55 95       	asr	r21
 7ac:	47 95       	ror	r20
 7ae:	55 95       	asr	r21
 7b0:	47 95       	ror	r20
 7b2:	55 95       	asr	r21
 7b4:	47 95       	ror	r20
 7b6:	62 e0       	ldi	r22, 0x02	; 2
 7b8:	82 e4       	ldi	r24, 0x42	; 66
 7ba:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('B',4,READ_BIT(data,6));
 7be:	4c 2f       	mov	r20, r28
 7c0:	40 74       	andi	r20, 0x40	; 64
 7c2:	50 e0       	ldi	r21, 0x00	; 0
 7c4:	04 2e       	mov	r0, r20
 7c6:	45 2f       	mov	r20, r21
 7c8:	00 0c       	add	r0, r0
 7ca:	44 1f       	adc	r20, r20
 7cc:	55 0b       	sbc	r21, r21
 7ce:	00 0c       	add	r0, r0
 7d0:	44 1f       	adc	r20, r20
 7d2:	55 1f       	adc	r21, r21
 7d4:	64 e0       	ldi	r22, 0x04	; 4
 7d6:	82 e4       	ldi	r24, 0x42	; 66
 7d8:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('B',5,READ_BIT(data,7));
 7dc:	4c 2f       	mov	r20, r28
 7de:	44 1f       	adc	r20, r20
 7e0:	44 27       	eor	r20, r20
 7e2:	44 1f       	adc	r20, r20
 7e4:	65 e0       	ldi	r22, 0x05	; 5
 7e6:	82 e4       	ldi	r24, 0x42	; 66
 7e8:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	DIO_write('D',RS,1);
 7ec:	41 e0       	ldi	r20, 0x01	; 1
 7ee:	62 e0       	ldi	r22, 0x02	; 2
 7f0:	84 e4       	ldi	r24, 0x44	; 68
 7f2:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
	send_falling_edge();
 7f6:	0e 94 a9 02 	call	0x552	; 0x552 <send_falling_edge>
 7fa:	89 ef       	ldi	r24, 0xF9	; 249
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	f1 f7       	brne	.-4      	; 0x7fe <LCD_vSend_char+0xd2>
 802:	00 c0       	rjmp	.+0      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 804:	00 00       	nop
	write_high_nibble('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
 806:	cf 91       	pop	r28
 808:	08 95       	ret

0000080a <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 810:	03 c0       	rjmp	.+6      	; 0x818 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
 812:	0e 94 96 03 	call	0x72c	; 0x72c <LCD_vSend_char>
		data++;
 816:	21 96       	adiw	r28, 0x01	; 1
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 818:	88 81       	ld	r24, Y
 81a:	81 11       	cpse	r24, r1
 81c:	fa cf       	rjmp	.-12     	; 0x812 <LCD_vSend_string+0x8>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	08 95       	ret

00000824 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_vSend_cmd>
 82a:	83 ec       	ldi	r24, 0xC3	; 195
 82c:	99 e0       	ldi	r25, 0x09	; 9
 82e:	01 97       	sbiw	r24, 0x01	; 1
 830:	f1 f7       	brne	.-4      	; 0x82e <LCD_clearscreen+0xa>
 832:	00 c0       	rjmp	.+0      	; 0x834 <LCD_clearscreen+0x10>
 834:	00 00       	nop
 836:	08 95       	ret

00000838 <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 838:	9f ef       	ldi	r25, 0xFF	; 255
 83a:	98 0f       	add	r25, r24
 83c:	92 30       	cpi	r25, 0x02	; 2
 83e:	70 f4       	brcc	.+28     	; 0x85c <LCD_movecursor+0x24>
 840:	61 31       	cpi	r22, 0x11	; 17
 842:	70 f4       	brcc	.+28     	; 0x860 <LCD_movecursor+0x28>
 844:	66 23       	and	r22, r22
 846:	71 f0       	breq	.+28     	; 0x864 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 848:	81 30       	cpi	r24, 0x01	; 1
 84a:	19 f4       	brne	.+6      	; 0x852 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 84c:	2f e7       	ldi	r18, 0x7F	; 127
 84e:	26 0f       	add	r18, r22
 850:	0a c0       	rjmp	.+20     	; 0x866 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 852:	82 30       	cpi	r24, 0x02	; 2
 854:	41 f4       	brne	.+16     	; 0x866 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 856:	2f eb       	ldi	r18, 0xBF	; 191
 858:	26 0f       	add	r18, r22
 85a:	05 c0       	rjmp	.+10     	; 0x866 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 85c:	20 e8       	ldi	r18, 0x80	; 128
 85e:	03 c0       	rjmp	.+6      	; 0x866 <LCD_movecursor+0x2e>
 860:	20 e8       	ldi	r18, 0x80	; 128
 862:	01 c0       	rjmp	.+2      	; 0x866 <LCD_movecursor+0x2e>
 864:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 866:	82 2f       	mov	r24, r18
 868:	0e 94 c0 02 	call	0x580	; 0x580 <LCD_vSend_cmd>
 86c:	89 ef       	ldi	r24, 0xF9	; 249
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	f1 f7       	brne	.-4      	; 0x870 <LCD_movecursor+0x38>
 874:	00 c0       	rjmp	.+0      	; 0x876 <LCD_movecursor+0x3e>
 876:	00 00       	nop
 878:	08 95       	ret

0000087a <LM35_Init>:
	
		/* ADC Configuration and Init */
		ADC_ConfigData ADC_Data;
		ADC_Data.Prescaler = ADC_PRESCALER_128;
		ADC_Data.VoltageReference = ADC_VOLTAGE_REFERENCE_AVCC;
		ADC_Init(ADC_Data);
 87a:	80 e4       	ldi	r24, 0x40	; 64
 87c:	97 e0       	ldi	r25, 0x07	; 7
 87e:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
 882:	08 95       	ret

00000884 <get_reading>:
}

u8 get_reading()
{
	   AdcValue =  ADC_ReadPin(ADC0);
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_ReadPin>
 88a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <AdcValue+0x1>
 88e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <AdcValue>
	   temperature=((u16) AdcValue/2.2);
 892:	bc 01       	movw	r22, r24
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 ef 05 	call	0xbde	; 0xbde <__floatunsisf>
 89c:	2d ec       	ldi	r18, 0xCD	; 205
 89e:	3c ec       	ldi	r19, 0xCC	; 204
 8a0:	4c e0       	ldi	r20, 0x0C	; 12
 8a2:	50 e4       	ldi	r21, 0x40	; 64
 8a4:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__divsf3>
 8a8:	0e 94 c0 05 	call	0xb80	; 0xb80 <__fixunssfsi>
 8ac:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <temperature+0x1>
 8b0:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <temperature>
	   U = temperature%10;
 8b4:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <temperature>
 8b8:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <temperature+0x1>
 8bc:	9a 01       	movw	r18, r20
 8be:	ad ec       	ldi	r26, 0xCD	; 205
 8c0:	bc ec       	ldi	r27, 0xCC	; 204
 8c2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__umulhisi3>
 8c6:	96 95       	lsr	r25
 8c8:	87 95       	ror	r24
 8ca:	96 95       	lsr	r25
 8cc:	87 95       	ror	r24
 8ce:	96 95       	lsr	r25
 8d0:	87 95       	ror	r24
 8d2:	9c 01       	movw	r18, r24
 8d4:	22 0f       	add	r18, r18
 8d6:	33 1f       	adc	r19, r19
 8d8:	88 0f       	add	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	88 0f       	add	r24, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	82 0f       	add	r24, r18
 8e6:	93 1f       	adc	r25, r19
 8e8:	9a 01       	movw	r18, r20
 8ea:	28 1b       	sub	r18, r24
 8ec:	39 0b       	sbc	r19, r25
 8ee:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <__data_end>
	   val=(u8)( (temperature )/10);
 8f2:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <temperature>
 8f6:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <temperature+0x1>
 8fa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__umulhisi3>
 8fe:	96 95       	lsr	r25
 900:	87 95       	ror	r24
 902:	96 95       	lsr	r25
 904:	87 95       	ror	r24
 906:	96 95       	lsr	r25
 908:	87 95       	ror	r24
 90a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <val>
	   T = val%10;
 90e:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <val>
 912:	8d ec       	ldi	r24, 0xCD	; 205
 914:	38 9f       	mul	r19, r24
 916:	91 2d       	mov	r25, r1
 918:	11 24       	eor	r1, r1
 91a:	96 95       	lsr	r25
 91c:	96 95       	lsr	r25
 91e:	96 95       	lsr	r25
 920:	99 0f       	add	r25, r25
 922:	29 2f       	mov	r18, r25
 924:	22 0f       	add	r18, r18
 926:	22 0f       	add	r18, r18
 928:	92 0f       	add	r25, r18
 92a:	39 1b       	sub	r19, r25
 92c:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <T>
	   val =(u8) val/10;
 930:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <val>
 934:	98 9f       	mul	r25, r24
 936:	91 2d       	mov	r25, r1
 938:	11 24       	eor	r1, r1
 93a:	96 95       	lsr	r25
 93c:	96 95       	lsr	r25
 93e:	96 95       	lsr	r25
 940:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <val>
	   H= val%10;
 944:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <val>
 948:	28 9f       	mul	r18, r24
 94a:	81 2d       	mov	r24, r1
 94c:	11 24       	eor	r1, r1
 94e:	86 95       	lsr	r24
 950:	86 95       	lsr	r24
 952:	86 95       	lsr	r24
 954:	88 0f       	add	r24, r24
 956:	98 2f       	mov	r25, r24
 958:	99 0f       	add	r25, r25
 95a:	99 0f       	add	r25, r25
 95c:	89 0f       	add	r24, r25
 95e:	28 1b       	sub	r18, r24
 960:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <H>
	    LCD_movecursor(0,0);
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_movecursor>
	    LCD_vSend_char ((T)+48);
 970:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <T>
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	c0 96       	adiw	r24, 0x30	; 48
 978:	0e 94 96 03 	call	0x72c	; 0x72c <LCD_vSend_char>
	    LCD_movecursor(1,2);
 97c:	62 e0       	ldi	r22, 0x02	; 2
 97e:	70 e0       	ldi	r23, 0x00	; 0
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_movecursor>
	    LCD_vSend_char((U)+48);
 988:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	c0 96       	adiw	r24, 0x30	; 48
 990:	0e 94 96 03 	call	0x72c	; 0x72c <LCD_vSend_char>
		transmit_buf[2] = T+48;
 994:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <T>
 998:	e9 e4       	ldi	r30, 0x49	; 73
 99a:	f1 e0       	ldi	r31, 0x01	; 1
 99c:	80 5d       	subi	r24, 0xD0	; 208
 99e:	82 83       	std	Z+2, r24	; 0x02
		transmit_buf[3] = U+48;
 9a0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 9a4:	80 5d       	subi	r24, 0xD0	; 208
 9a6:	83 83       	std	Z+3, r24	; 0x03
		transmit_buf[4]= 255 ;
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	84 83       	std	Z+4, r24	; 0x04
	   return temperature;
 9ac:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <temperature>
 9b0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <temperature+0x1>
}
 9b4:	08 95       	ret

000009b6 <main>:
#include <avr/io.h>


int main(void)
{
	System_init();
 9b6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <System_init>


    while(1)
    {
	        
			System_main_function();
 9ba:	0e 94 a4 02 	call	0x548	; 0x548 <System_main_function>
 9be:	fd cf       	rjmp	.-6      	; 0x9ba <main+0x4>

000009c0 <Relay_Init>:
 */ 

#include "DIO.h"
#include "Relay.h"
void Relay_Init(){
		DIO_vsetPINDir('C',RelayPin,1);
 9c0:	41 e0       	ldi	r20, 0x01	; 1
 9c2:	61 e0       	ldi	r22, 0x01	; 1
 9c4:	83 e4       	ldi	r24, 0x43	; 67
 9c6:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
 9ca:	08 95       	ret

000009cc <Relay_On>:
}
void Relay_On(){
	DIO_write('C',RelayPin,1);
 9cc:	41 e0       	ldi	r20, 0x01	; 1
 9ce:	61 e0       	ldi	r22, 0x01	; 1
 9d0:	83 e4       	ldi	r24, 0x43	; 67
 9d2:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
 9d6:	08 95       	ret

000009d8 <Relay_Off>:
}
void Relay_Off(){
	DIO_write('C',RelayPin,0);
 9d8:	40 e0       	ldi	r20, 0x00	; 0
 9da:	61 e0       	ldi	r22, 0x01	; 1
 9dc:	83 e4       	ldi	r24, 0x43	; 67
 9de:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_write>
 9e2:	08 95       	ret

000009e4 <PWM_init>:
#include <stdlib.h>
#include <stdio.h>

 void PWM_init()
	{
		DIO_vsetPINDir('B',3,1);
 9e4:	41 e0       	ldi	r20, 0x01	; 1
 9e6:	63 e0       	ldi	r22, 0x03	; 3
 9e8:	82 e4       	ldi	r24, 0x42	; 66
 9ea:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vsetPINDir>
		TCCR2A |= (1<<COM2A1) | (1<<WGM21) | (1<<WGM20);	//Non-Inverting Fast PWM mode 3 using OCR A unit
 9ee:	e0 eb       	ldi	r30, 0xB0	; 176
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	80 81       	ld	r24, Z
 9f4:	83 68       	ori	r24, 0x83	; 131
 9f6:	80 83       	st	Z, r24
		TCCR2B |= (1<<CS20);	//No-Prescalar
 9f8:	e1 eb       	ldi	r30, 0xB1	; 177
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	80 81       	ld	r24, Z
 9fe:	81 60       	ori	r24, 0x01	; 1
 a00:	80 83       	st	Z, r24
 a02:	08 95       	ret

00000a04 <PWM_setDutyCycle>:



void PWM_setDutyCycle(u8 dutyCycle)
	{
		OCR2A = dutyCycle;	// Duty cycle of 75%
 a04:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 a08:	08 95       	ret

00000a0a <USART_Init>:
#include "USART.h"

void USART_Init()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 a0a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 a0e:	87 e6       	ldi	r24, 0x67	; 103
 a10:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = (3<<UCSZ00);
 a14:	86 e0       	ldi	r24, 0x06	; 6
 a16:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 a1a:	88 e1       	ldi	r24, 0x18	; 24
 a1c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 a20:	08 95       	ret

00000a22 <USART_TransmitChar>:
}

void USART_TransmitChar(u8 DataByte)
{
while (( UCSR0A & (1<<UDRE0)) == 0); // Do nothing until UDR is ready
 a22:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 a26:	95 ff       	sbrs	r25, 5
 a28:	fc cf       	rjmp	.-8      	; 0xa22 <USART_TransmitChar>
UDR0 = DataByte;
 a2a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 a2e:	08 95       	ret

00000a30 <USART_ReceiveChar>:
}

u8 USART_ReceiveChar(void)
{
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSR0A,RXC0)==0);
 a30:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 a34:	88 23       	and	r24, r24
 a36:	e4 f7       	brge	.-8      	; 0xa30 <USART_ReceiveChar>
	/*Receive data from UDR receive buffer*/
	return UDR0 ;
 a38:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 a3c:	08 95       	ret

00000a3e <USART_SendString>:

void USART_SendString(u8 *ptr)
{
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
 a42:	ec 01       	movw	r28, r24
	while(*ptr!=255)
 a44:	0c c0       	rjmp	.+24     	; 0xa5e <USART_SendString+0x20>
	{
	USART_TransmitChar(*ptr);
 a46:	0e 94 11 05 	call	0xa22	; 0xa22 <USART_TransmitChar>
		ptr++;
 a4a:	21 96       	adiw	r28, 0x01	; 1
 a4c:	2f ef       	ldi	r18, 0xFF	; 255
 a4e:	81 ee       	ldi	r24, 0xE1	; 225
 a50:	94 e0       	ldi	r25, 0x04	; 4
 a52:	21 50       	subi	r18, 0x01	; 1
 a54:	80 40       	sbci	r24, 0x00	; 0
 a56:	90 40       	sbci	r25, 0x00	; 0
 a58:	e1 f7       	brne	.-8      	; 0xa52 <USART_SendString+0x14>
 a5a:	00 c0       	rjmp	.+0      	; 0xa5c <USART_SendString+0x1e>
 a5c:	00 00       	nop
	return UDR0 ;
}

void USART_SendString(u8 *ptr)
{
	while(*ptr!=255)
 a5e:	88 81       	ld	r24, Y
 a60:	8f 3f       	cpi	r24, 0xFF	; 255
 a62:	89 f7       	brne	.-30     	; 0xa46 <USART_SendString+0x8>
	{
	USART_TransmitChar(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
 a64:	df 91       	pop	r29
 a66:	cf 91       	pop	r28
 a68:	08 95       	ret

00000a6a <UART_getLine>:

void UART_getLine(char* buf, uint8_t n)
{
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	8c 01       	movw	r16, r24
 a74:	d6 2f       	mov	r29, r22
	uint8_t bufIdx = 0;
 a76:	c0 e0       	ldi	r28, 0x00	; 0
	// while received character is not carriage return
	// and end of buffer has not been reached
	do
	{
		// receive character
		c = USART_ReceiveChar();
 a78:	0e 94 18 05 	call	0xa30	; 0xa30 <USART_ReceiveChar>

		// store character in buffer
		buf[bufIdx++] = c;
 a7c:	91 e0       	ldi	r25, 0x01	; 1
 a7e:	9c 0f       	add	r25, r28
 a80:	f8 01       	movw	r30, r16
 a82:	ec 0f       	add	r30, r28
 a84:	f1 1d       	adc	r31, r1
 a86:	80 83       	st	Z, r24
	}
	while((bufIdx < n) && (c != '!'));
 a88:	9d 17       	cp	r25, r29
 a8a:	18 f4       	brcc	.+6      	; 0xa92 <UART_getLine+0x28>
	{
		// receive character
		c = USART_ReceiveChar();

		// store character in buffer
		buf[bufIdx++] = c;
 a8c:	c9 2f       	mov	r28, r25
	}
	while((bufIdx < n) && (c != '!'));
 a8e:	81 32       	cpi	r24, 0x21	; 33
 a90:	99 f7       	brne	.-26     	; 0xa78 <UART_getLine+0xe>

	// ensure buffer is null terminated
	
}
 a92:	df 91       	pop	r29
 a94:	cf 91       	pop	r28
 a96:	1f 91       	pop	r17
 a98:	0f 91       	pop	r16
 a9a:	08 95       	ret

00000a9c <__divsf3>:
 a9c:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3x>
 aa0:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__fp_round>
 aa4:	0e 94 3c 06 	call	0xc78	; 0xc78 <__fp_pscB>
 aa8:	58 f0       	brcs	.+22     	; 0xac0 <__divsf3+0x24>
 aaa:	0e 94 35 06 	call	0xc6a	; 0xc6a <__fp_pscA>
 aae:	40 f0       	brcs	.+16     	; 0xac0 <__divsf3+0x24>
 ab0:	29 f4       	brne	.+10     	; 0xabc <__divsf3+0x20>
 ab2:	5f 3f       	cpi	r21, 0xFF	; 255
 ab4:	29 f0       	breq	.+10     	; 0xac0 <__divsf3+0x24>
 ab6:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_inf>
 aba:	51 11       	cpse	r21, r1
 abc:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_szero>
 ac0:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_nan>

00000ac4 <__divsf3x>:
 ac4:	0e 94 54 06 	call	0xca8	; 0xca8 <__fp_split3>
 ac8:	68 f3       	brcs	.-38     	; 0xaa4 <__divsf3+0x8>

00000aca <__divsf3_pse>:
 aca:	99 23       	and	r25, r25
 acc:	b1 f3       	breq	.-20     	; 0xaba <__divsf3+0x1e>
 ace:	55 23       	and	r21, r21
 ad0:	91 f3       	breq	.-28     	; 0xab6 <__divsf3+0x1a>
 ad2:	95 1b       	sub	r25, r21
 ad4:	55 0b       	sbc	r21, r21
 ad6:	bb 27       	eor	r27, r27
 ad8:	aa 27       	eor	r26, r26
 ada:	62 17       	cp	r22, r18
 adc:	73 07       	cpc	r23, r19
 ade:	84 07       	cpc	r24, r20
 ae0:	38 f0       	brcs	.+14     	; 0xaf0 <__divsf3_pse+0x26>
 ae2:	9f 5f       	subi	r25, 0xFF	; 255
 ae4:	5f 4f       	sbci	r21, 0xFF	; 255
 ae6:	22 0f       	add	r18, r18
 ae8:	33 1f       	adc	r19, r19
 aea:	44 1f       	adc	r20, r20
 aec:	aa 1f       	adc	r26, r26
 aee:	a9 f3       	breq	.-22     	; 0xada <__divsf3_pse+0x10>
 af0:	35 d0       	rcall	.+106    	; 0xb5c <__divsf3_pse+0x92>
 af2:	0e 2e       	mov	r0, r30
 af4:	3a f0       	brmi	.+14     	; 0xb04 <__divsf3_pse+0x3a>
 af6:	e0 e8       	ldi	r30, 0x80	; 128
 af8:	32 d0       	rcall	.+100    	; 0xb5e <__divsf3_pse+0x94>
 afa:	91 50       	subi	r25, 0x01	; 1
 afc:	50 40       	sbci	r21, 0x00	; 0
 afe:	e6 95       	lsr	r30
 b00:	00 1c       	adc	r0, r0
 b02:	ca f7       	brpl	.-14     	; 0xaf6 <__divsf3_pse+0x2c>
 b04:	2b d0       	rcall	.+86     	; 0xb5c <__divsf3_pse+0x92>
 b06:	fe 2f       	mov	r31, r30
 b08:	29 d0       	rcall	.+82     	; 0xb5c <__divsf3_pse+0x92>
 b0a:	66 0f       	add	r22, r22
 b0c:	77 1f       	adc	r23, r23
 b0e:	88 1f       	adc	r24, r24
 b10:	bb 1f       	adc	r27, r27
 b12:	26 17       	cp	r18, r22
 b14:	37 07       	cpc	r19, r23
 b16:	48 07       	cpc	r20, r24
 b18:	ab 07       	cpc	r26, r27
 b1a:	b0 e8       	ldi	r27, 0x80	; 128
 b1c:	09 f0       	breq	.+2      	; 0xb20 <__divsf3_pse+0x56>
 b1e:	bb 0b       	sbc	r27, r27
 b20:	80 2d       	mov	r24, r0
 b22:	bf 01       	movw	r22, r30
 b24:	ff 27       	eor	r31, r31
 b26:	93 58       	subi	r25, 0x83	; 131
 b28:	5f 4f       	sbci	r21, 0xFF	; 255
 b2a:	3a f0       	brmi	.+14     	; 0xb3a <__divsf3_pse+0x70>
 b2c:	9e 3f       	cpi	r25, 0xFE	; 254
 b2e:	51 05       	cpc	r21, r1
 b30:	78 f0       	brcs	.+30     	; 0xb50 <__divsf3_pse+0x86>
 b32:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_inf>
 b36:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_szero>
 b3a:	5f 3f       	cpi	r21, 0xFF	; 255
 b3c:	e4 f3       	brlt	.-8      	; 0xb36 <__divsf3_pse+0x6c>
 b3e:	98 3e       	cpi	r25, 0xE8	; 232
 b40:	d4 f3       	brlt	.-12     	; 0xb36 <__divsf3_pse+0x6c>
 b42:	86 95       	lsr	r24
 b44:	77 95       	ror	r23
 b46:	67 95       	ror	r22
 b48:	b7 95       	ror	r27
 b4a:	f7 95       	ror	r31
 b4c:	9f 5f       	subi	r25, 0xFF	; 255
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <__divsf3_pse+0x78>
 b50:	88 0f       	add	r24, r24
 b52:	91 1d       	adc	r25, r1
 b54:	96 95       	lsr	r25
 b56:	87 95       	ror	r24
 b58:	97 f9       	bld	r25, 7
 b5a:	08 95       	ret
 b5c:	e1 e0       	ldi	r30, 0x01	; 1
 b5e:	66 0f       	add	r22, r22
 b60:	77 1f       	adc	r23, r23
 b62:	88 1f       	adc	r24, r24
 b64:	bb 1f       	adc	r27, r27
 b66:	62 17       	cp	r22, r18
 b68:	73 07       	cpc	r23, r19
 b6a:	84 07       	cpc	r24, r20
 b6c:	ba 07       	cpc	r27, r26
 b6e:	20 f0       	brcs	.+8      	; 0xb78 <__divsf3_pse+0xae>
 b70:	62 1b       	sub	r22, r18
 b72:	73 0b       	sbc	r23, r19
 b74:	84 0b       	sbc	r24, r20
 b76:	ba 0b       	sbc	r27, r26
 b78:	ee 1f       	adc	r30, r30
 b7a:	88 f7       	brcc	.-30     	; 0xb5e <__divsf3_pse+0x94>
 b7c:	e0 95       	com	r30
 b7e:	08 95       	ret

00000b80 <__fixunssfsi>:
 b80:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_splitA>
 b84:	88 f0       	brcs	.+34     	; 0xba8 <__fixunssfsi+0x28>
 b86:	9f 57       	subi	r25, 0x7F	; 127
 b88:	98 f0       	brcs	.+38     	; 0xbb0 <__fixunssfsi+0x30>
 b8a:	b9 2f       	mov	r27, r25
 b8c:	99 27       	eor	r25, r25
 b8e:	b7 51       	subi	r27, 0x17	; 23
 b90:	b0 f0       	brcs	.+44     	; 0xbbe <__fixunssfsi+0x3e>
 b92:	e1 f0       	breq	.+56     	; 0xbcc <__fixunssfsi+0x4c>
 b94:	66 0f       	add	r22, r22
 b96:	77 1f       	adc	r23, r23
 b98:	88 1f       	adc	r24, r24
 b9a:	99 1f       	adc	r25, r25
 b9c:	1a f0       	brmi	.+6      	; 0xba4 <__fixunssfsi+0x24>
 b9e:	ba 95       	dec	r27
 ba0:	c9 f7       	brne	.-14     	; 0xb94 <__fixunssfsi+0x14>
 ba2:	14 c0       	rjmp	.+40     	; 0xbcc <__fixunssfsi+0x4c>
 ba4:	b1 30       	cpi	r27, 0x01	; 1
 ba6:	91 f0       	breq	.+36     	; 0xbcc <__fixunssfsi+0x4c>
 ba8:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_zero>
 bac:	b1 e0       	ldi	r27, 0x01	; 1
 bae:	08 95       	ret
 bb0:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_zero>
 bb4:	67 2f       	mov	r22, r23
 bb6:	78 2f       	mov	r23, r24
 bb8:	88 27       	eor	r24, r24
 bba:	b8 5f       	subi	r27, 0xF8	; 248
 bbc:	39 f0       	breq	.+14     	; 0xbcc <__fixunssfsi+0x4c>
 bbe:	b9 3f       	cpi	r27, 0xF9	; 249
 bc0:	cc f3       	brlt	.-14     	; 0xbb4 <__fixunssfsi+0x34>
 bc2:	86 95       	lsr	r24
 bc4:	77 95       	ror	r23
 bc6:	67 95       	ror	r22
 bc8:	b3 95       	inc	r27
 bca:	d9 f7       	brne	.-10     	; 0xbc2 <__fixunssfsi+0x42>
 bcc:	3e f4       	brtc	.+14     	; 0xbdc <__fixunssfsi+0x5c>
 bce:	90 95       	com	r25
 bd0:	80 95       	com	r24
 bd2:	70 95       	com	r23
 bd4:	61 95       	neg	r22
 bd6:	7f 4f       	sbci	r23, 0xFF	; 255
 bd8:	8f 4f       	sbci	r24, 0xFF	; 255
 bda:	9f 4f       	sbci	r25, 0xFF	; 255
 bdc:	08 95       	ret

00000bde <__floatunsisf>:
 bde:	e8 94       	clt
 be0:	09 c0       	rjmp	.+18     	; 0xbf4 <__floatsisf+0x12>

00000be2 <__floatsisf>:
 be2:	97 fb       	bst	r25, 7
 be4:	3e f4       	brtc	.+14     	; 0xbf4 <__floatsisf+0x12>
 be6:	90 95       	com	r25
 be8:	80 95       	com	r24
 bea:	70 95       	com	r23
 bec:	61 95       	neg	r22
 bee:	7f 4f       	sbci	r23, 0xFF	; 255
 bf0:	8f 4f       	sbci	r24, 0xFF	; 255
 bf2:	9f 4f       	sbci	r25, 0xFF	; 255
 bf4:	99 23       	and	r25, r25
 bf6:	a9 f0       	breq	.+42     	; 0xc22 <__floatsisf+0x40>
 bf8:	f9 2f       	mov	r31, r25
 bfa:	96 e9       	ldi	r25, 0x96	; 150
 bfc:	bb 27       	eor	r27, r27
 bfe:	93 95       	inc	r25
 c00:	f6 95       	lsr	r31
 c02:	87 95       	ror	r24
 c04:	77 95       	ror	r23
 c06:	67 95       	ror	r22
 c08:	b7 95       	ror	r27
 c0a:	f1 11       	cpse	r31, r1
 c0c:	f8 cf       	rjmp	.-16     	; 0xbfe <__floatsisf+0x1c>
 c0e:	fa f4       	brpl	.+62     	; 0xc4e <__floatsisf+0x6c>
 c10:	bb 0f       	add	r27, r27
 c12:	11 f4       	brne	.+4      	; 0xc18 <__floatsisf+0x36>
 c14:	60 ff       	sbrs	r22, 0
 c16:	1b c0       	rjmp	.+54     	; 0xc4e <__floatsisf+0x6c>
 c18:	6f 5f       	subi	r22, 0xFF	; 255
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	16 c0       	rjmp	.+44     	; 0xc4e <__floatsisf+0x6c>
 c22:	88 23       	and	r24, r24
 c24:	11 f0       	breq	.+4      	; 0xc2a <__floatsisf+0x48>
 c26:	96 e9       	ldi	r25, 0x96	; 150
 c28:	11 c0       	rjmp	.+34     	; 0xc4c <__floatsisf+0x6a>
 c2a:	77 23       	and	r23, r23
 c2c:	21 f0       	breq	.+8      	; 0xc36 <__floatsisf+0x54>
 c2e:	9e e8       	ldi	r25, 0x8E	; 142
 c30:	87 2f       	mov	r24, r23
 c32:	76 2f       	mov	r23, r22
 c34:	05 c0       	rjmp	.+10     	; 0xc40 <__floatsisf+0x5e>
 c36:	66 23       	and	r22, r22
 c38:	71 f0       	breq	.+28     	; 0xc56 <__floatsisf+0x74>
 c3a:	96 e8       	ldi	r25, 0x86	; 134
 c3c:	86 2f       	mov	r24, r22
 c3e:	70 e0       	ldi	r23, 0x00	; 0
 c40:	60 e0       	ldi	r22, 0x00	; 0
 c42:	2a f0       	brmi	.+10     	; 0xc4e <__floatsisf+0x6c>
 c44:	9a 95       	dec	r25
 c46:	66 0f       	add	r22, r22
 c48:	77 1f       	adc	r23, r23
 c4a:	88 1f       	adc	r24, r24
 c4c:	da f7       	brpl	.-10     	; 0xc44 <__floatsisf+0x62>
 c4e:	88 0f       	add	r24, r24
 c50:	96 95       	lsr	r25
 c52:	87 95       	ror	r24
 c54:	97 f9       	bld	r25, 7
 c56:	08 95       	ret

00000c58 <__fp_inf>:
 c58:	97 f9       	bld	r25, 7
 c5a:	9f 67       	ori	r25, 0x7F	; 127
 c5c:	80 e8       	ldi	r24, 0x80	; 128
 c5e:	70 e0       	ldi	r23, 0x00	; 0
 c60:	60 e0       	ldi	r22, 0x00	; 0
 c62:	08 95       	ret

00000c64 <__fp_nan>:
 c64:	9f ef       	ldi	r25, 0xFF	; 255
 c66:	80 ec       	ldi	r24, 0xC0	; 192
 c68:	08 95       	ret

00000c6a <__fp_pscA>:
 c6a:	00 24       	eor	r0, r0
 c6c:	0a 94       	dec	r0
 c6e:	16 16       	cp	r1, r22
 c70:	17 06       	cpc	r1, r23
 c72:	18 06       	cpc	r1, r24
 c74:	09 06       	cpc	r0, r25
 c76:	08 95       	ret

00000c78 <__fp_pscB>:
 c78:	00 24       	eor	r0, r0
 c7a:	0a 94       	dec	r0
 c7c:	12 16       	cp	r1, r18
 c7e:	13 06       	cpc	r1, r19
 c80:	14 06       	cpc	r1, r20
 c82:	05 06       	cpc	r0, r21
 c84:	08 95       	ret

00000c86 <__fp_round>:
 c86:	09 2e       	mov	r0, r25
 c88:	03 94       	inc	r0
 c8a:	00 0c       	add	r0, r0
 c8c:	11 f4       	brne	.+4      	; 0xc92 <__fp_round+0xc>
 c8e:	88 23       	and	r24, r24
 c90:	52 f0       	brmi	.+20     	; 0xca6 <__fp_round+0x20>
 c92:	bb 0f       	add	r27, r27
 c94:	40 f4       	brcc	.+16     	; 0xca6 <__fp_round+0x20>
 c96:	bf 2b       	or	r27, r31
 c98:	11 f4       	brne	.+4      	; 0xc9e <__fp_round+0x18>
 c9a:	60 ff       	sbrs	r22, 0
 c9c:	04 c0       	rjmp	.+8      	; 0xca6 <__fp_round+0x20>
 c9e:	6f 5f       	subi	r22, 0xFF	; 255
 ca0:	7f 4f       	sbci	r23, 0xFF	; 255
 ca2:	8f 4f       	sbci	r24, 0xFF	; 255
 ca4:	9f 4f       	sbci	r25, 0xFF	; 255
 ca6:	08 95       	ret

00000ca8 <__fp_split3>:
 ca8:	57 fd       	sbrc	r21, 7
 caa:	90 58       	subi	r25, 0x80	; 128
 cac:	44 0f       	add	r20, r20
 cae:	55 1f       	adc	r21, r21
 cb0:	59 f0       	breq	.+22     	; 0xcc8 <__fp_splitA+0x10>
 cb2:	5f 3f       	cpi	r21, 0xFF	; 255
 cb4:	71 f0       	breq	.+28     	; 0xcd2 <__fp_splitA+0x1a>
 cb6:	47 95       	ror	r20

00000cb8 <__fp_splitA>:
 cb8:	88 0f       	add	r24, r24
 cba:	97 fb       	bst	r25, 7
 cbc:	99 1f       	adc	r25, r25
 cbe:	61 f0       	breq	.+24     	; 0xcd8 <__fp_splitA+0x20>
 cc0:	9f 3f       	cpi	r25, 0xFF	; 255
 cc2:	79 f0       	breq	.+30     	; 0xce2 <__fp_splitA+0x2a>
 cc4:	87 95       	ror	r24
 cc6:	08 95       	ret
 cc8:	12 16       	cp	r1, r18
 cca:	13 06       	cpc	r1, r19
 ccc:	14 06       	cpc	r1, r20
 cce:	55 1f       	adc	r21, r21
 cd0:	f2 cf       	rjmp	.-28     	; 0xcb6 <__fp_split3+0xe>
 cd2:	46 95       	lsr	r20
 cd4:	f1 df       	rcall	.-30     	; 0xcb8 <__fp_splitA>
 cd6:	08 c0       	rjmp	.+16     	; 0xce8 <__fp_splitA+0x30>
 cd8:	16 16       	cp	r1, r22
 cda:	17 06       	cpc	r1, r23
 cdc:	18 06       	cpc	r1, r24
 cde:	99 1f       	adc	r25, r25
 ce0:	f1 cf       	rjmp	.-30     	; 0xcc4 <__fp_splitA+0xc>
 ce2:	86 95       	lsr	r24
 ce4:	71 05       	cpc	r23, r1
 ce6:	61 05       	cpc	r22, r1
 ce8:	08 94       	sec
 cea:	08 95       	ret

00000cec <__fp_zero>:
 cec:	e8 94       	clt

00000cee <__fp_szero>:
 cee:	bb 27       	eor	r27, r27
 cf0:	66 27       	eor	r22, r22
 cf2:	77 27       	eor	r23, r23
 cf4:	cb 01       	movw	r24, r22
 cf6:	97 f9       	bld	r25, 7
 cf8:	08 95       	ret

00000cfa <__umulhisi3>:
 cfa:	a2 9f       	mul	r26, r18
 cfc:	b0 01       	movw	r22, r0
 cfe:	b3 9f       	mul	r27, r19
 d00:	c0 01       	movw	r24, r0
 d02:	a3 9f       	mul	r26, r19
 d04:	70 0d       	add	r23, r0
 d06:	81 1d       	adc	r24, r1
 d08:	11 24       	eor	r1, r1
 d0a:	91 1d       	adc	r25, r1
 d0c:	b2 9f       	mul	r27, r18
 d0e:	70 0d       	add	r23, r0
 d10:	81 1d       	adc	r24, r1
 d12:	11 24       	eor	r1, r1
 d14:	91 1d       	adc	r25, r1
 d16:	08 95       	ret

00000d18 <_exit>:
 d18:	f8 94       	cli

00000d1a <__stop_program>:
 d1a:	ff cf       	rjmp	.-2      	; 0xd1a <__stop_program>
